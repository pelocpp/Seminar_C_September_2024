===================================

Programmierung in C

Peter Loos

===================================

Dienstag

===================================

TODO:

break;  continue;


===================================


Was ist ein Feld?

Ein Speicherbereich mit Werten desselben Datentyps.
Die Daten liegen "hintereinander" // konsekutiv

Einschränkung:  Die Länge ist FIX.

===================================

for   - Wiederholungsschleife

while - Wiederholungsschleife

SYNTAX:

for ( anweisung (initialisierung) ; bedingung  ; anweisung (weiterschalten)   )
{
}

===========================================

Präprozessor
------------

Tooling:

== Editor (Quelltext)
== Präprozessor (Modifikationen am Quelltext / Quelltextänderungen)

   -- Direktiven:   Erste Spalte: #
                    Kommando:    define
                    Kommando:    include

== Compiler (Syntax, COFF-File generieren)
== Linker (COFF-Files, .EXE-File generieren)


Präprozessor: Etwas aus der Mode geraten

Reine TEXTERSETZUNG

#define   Length   20

ACHTUNG !!!!!!!!!!!!!!!

#define   Length   20;  // <==== Semikolon

#define True  1
#define False 0

=========================================================

Unterprogramm
-------------

In C:

== Procedure

     Unterprogramm
     Kann Parameter haben
     Es führt eine Reihe von Anweisungen aus
     Hat kein Ergebnis: Keinen Rückgabetyp (void == 'nichts') 

== Function

     Unterprogramm
     Kann Parameter haben
     Es führt eine Reihe von Anweisungen aus
     Hat ein Ergebnis: Rückgabetyp


SYNTAX:

Rückgabetyp NameDerProcedure '('  parameter   ')'
{
}


Spezialität: Rekursion
----------------------

Klassiker: Fakultät:   n! = (n-1)! * n

VORSICHT:

Sie können Ausnahmecode 0xC00000FD in ntstatus. h suchen.
Dieser Ausnahmecode ist STATUS_STACK_OVERFLOW

Frage:
Verwenden wir Rekursion in "Product SW" ???

Rayan: Ja.

Peter: VORSICHT !!!!!!!!!!!!!!!!

A) Der Stack wird belastet !!!!!!!!!!!!!

B) Wenn ein Fehler eintritt: Dann kommt es zu einem Stack Overflow == Absturz

C) In den meisten Fällen gibt es an Stelle einer rekursiven Lösung
   auch eine iterative Lösung.

==============================================================
==============================================================

Progammiersprache C:

Vorgänger: B,  PL/1

In C:

Datentyp Adresse:

Wahrheit: Datentyp Adresse, muss einen Bezug zu
          einem Datentyp (int, float) haben.


+		ip	0x000000f85356f5f4 {123}	int *

0x000000f85356f5f4
0x000000f85356f5f5
0x000000f85356f5f6
0x000000f85356f5f7

0x000000f85356f5f8   ..  frei

+		ip	0x00000056713cf854 {123}	int *

0x00000056713cf854
0x00000056713cf855
0x00000056713cf856
0x00000056713cf857

0x00000056713cf858


+		ip	0x005bf80c {123}	int *

0x005bf80c
0x005bf80d
0x005bf80e
0x005bf80f

0x005bf810

ip1 = 0x00cff6cc {1}

0x00cff6cc
0x00cff6cd
0x00cff6ce
0x00cff6cf

0x00cff6d0

=========================================

Adressen in C:

ZWEI OPERATOREN:

"Adresse von":                         & (Variable)

                                       "referenzieren" // sich auf etwas beziehen

"Wert von" // indirekter Zugriff :     * (Zeiger-Variable)

                                       "de-referenzieren"

Bilder:

https://github.com/pelocpp/cpp_introduction/blob/master/Cpp_Introduction/Markdown/ParameterPassingTechniques.md

============================================================

Zeiger-Arithmetik
-----------------

Konzept / Design von C:

Motivation von C:

C sollte ein Ersatz für Assembler sein.

Assembler: Auf Speicher sehr universell zugreifen

MOV ...

==============================================

"Adresse des zweiten Elements":

0x005bf80c   <=== Erstes Element
0x005bf80d
0x005bf80e
0x005bf80f

0x005bf810  <=== Zweites Element


Abstand von zwei aufeinander folgenden Elementen im Feld:

sizeof (int)

Bei uns / diesem Rechner: sizeof (int) = 4

Beispiel:

C4
C5
C6
C7

C8


E8
E9
EA

========================================================

Eine (ironische) Aussage:

In C gibt es KEINE Felder.

		* (ip + i) = 4 * i + 1;
0098683D  mov         eax,dword ptr [ebp-6Ch]  
00986840  lea         ecx,[eax*4+1]  
00986847  mov         edx,dword ptr [ebp-6Ch]  
0098684A  mov         eax,dword ptr [ip]  
0098684D  mov         dword ptr [eax+edx*4],ecx  
		// i = 0, 1, 2, 3
		// ip = 1024, 1028, 102C, 1030, 1034, ...

		// VEREINFACHENDE SYNTAX
		ip[i] = 4 * i + 1;  // IST IDENTISCH zu Zeile 97
00986850  mov         eax,dword ptr [ebp-6Ch]  
00986853  lea         ecx,[eax*4+1]  
0098685A  mov         edx,dword ptr [ebp-6Ch]  
0098685D  mov         eax,dword ptr [ip]  
00986860  mov         dword ptr [eax+edx*4],ecx  


// ===================================================

Frage: "Habe Derefenzierung nie gesehen"?

C++:

Themenbereich: Adressen:

A) Pointer

Brauche ich Pointer a la C auch in C++:

Ja.

Bei new/ delete:

int* vielenWerte = new int [100];

2 Optionen mit diesem Zeiger zu arbeiten:  // geerbt von C

i)  vielenWerte[i] = 99;
ii) *(vielenWerte + i) = 99;


b) Referenz

int  n = 123;
int& rn = n;

NICHT:    *rn = 456; FALSCH
SONDERN:   rn = 456;

=======================================================

	// langweilig:
	speicher [3] = 10;
002E67E0  mov         eax,4  
002E67E5  imul        ecx,eax,3  
002E67E8  mov         dword ptr speicher[ecx],0Ah  

	// interessanter
	*(speicher + 3) = 11;
002E67F0  mov         dword ptr [ebp-24h],0Bh  

	// very interesting
	*(3 + speicher) = 12;
002E67F7  mov         dword ptr [ebp-24h],0Ch  

	// very, very interesting
	3 [speicher] = 13;
002E67FE  mov         eax,4  
002E6803  imul        ecx,eax,3  
002E6806  mov         dword ptr speicher[ecx],0Dh  

====================================================

	// langweilig:
	ip[3] = 10;
007967E6  mov         eax,4  
007967EB  imul        ecx,eax,3  
007967EE  mov         edx,dword ptr [ip]  
007967F1  mov         dword ptr [edx+ecx],0Ah  

	// interessanter
	*(ip + 3) = 11;
007967F8  mov         eax,dword ptr [ip]  
007967FB  mov         dword ptr [eax+0Ch],0Bh  

	// very interesting
	*(3 + ip) = 12;
00796802  mov         eax,dword ptr [ip]  
00796805  mov         dword ptr [eax+0Ch],0Ch  

	// very, very interesting
	3[ip] = 13;
0079680C  mov         eax,4  
00796811  imul        ecx,eax,3  
00796814  mov         edx,dword ptr [ip]  
00796817  mov         dword ptr [edx+ecx],0Dh  

======================================================

Neues Thema:

== Arrays
== Unterprogramme
== Felder an Unterprogramme übergeben

Wie sieht "Call-by_value" bei Feldern aus???

Wird da eine Kopie eines Arrays übergeben: NEIN !!!

Sondern: Es wird die Anfangsadresse übergeben !!!

Konsequenz:

In C geht bei der Übergabe eines Felds die LÄNGE verloren !!

Es wird ja INTERN die Anfangsadresse übergeben !!!

"Array Decay"

==============================================================

Option 1:

Geht nicht immer, wenn die Anhäufung länger dauert als das Feld lang ist.

int doubleInterestRateWithWithAccumulation(
    double capital, double rate, double accumulation[], int length
);

