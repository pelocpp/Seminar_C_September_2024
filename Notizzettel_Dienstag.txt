===================================

Programmierung in C

Peter Loos

===================================

Dienstag

===================================

TODO:

break;  continue;


===================================


Was ist ein Feld?

Ein Speicherbereich mit Werten desselben Datentyps.
Die Daten liegen "hintereinander" // konsekutiv

Einschränkung:  Die Länge ist FIX.

===================================

for   - Wiederholungsschleife

while - Wiederholungsschleife

SYNTAX:

for ( anweisung (initialisierung) ; bedingung  ; anweisung (weiterschalten)   )
{
}

===========================================

Präprozessor
------------

Tooling:

== Editor (Quelltext)
== Präprozessor (Modifikationen am Quelltext / Quelltextänderungen)

   -- Direktiven:   Erste Spalte: #
                    Kommando:    define
                    Kommando:    include

== Compiler (Syntax, COFF-File generieren)
== Linker (COFF-Files, .EXE-File generieren)


Präprozessor: Etwas aus der Mode geraten

Reine TEXTERSETZUNG

#define   Length   20

ACHTUNG !!!!!!!!!!!!!!!

#define   Length   20;  // <==== Semikolon

#define True  1
#define False 0

=========================================================

Unterprogramm
-------------

In C:

== Procedure

     Unterprogramm
     Kann Parameter haben
     Es führt eine Reihe von Anweisungen aus
     Hat kein Ergebnis: Keinen Rückgabetyp (void == 'nichts') 

== Function

     Unterprogramm
     Kann Parameter haben
     Es führt eine Reihe von Anweisungen aus
     Hat ein Ergebnis: Rückgabetyp


SYNTAX:

Rückgabetyp NameDerProcedure '('  parameter   ')'
{
}


Spezialität: Rekursion
----------------------

Klassiker: Fakultät:   n! = (n-1)! * n

VORSICHT:

Sie können Ausnahmecode 0xC00000FD in ntstatus. h suchen.
Dieser Ausnahmecode ist STATUS_STACK_OVERFLOW

Frage:
Verwenden wir Rekursion in "Product SW" ???

Rayan: Ja.

Peter: VORSICHT !!!!!!!!!!!!!!!!

A) Der Stack wird belastet !!!!!!!!!!!!!

B) Wenn ein Fehler eintritt: Dann kommt es zu einem Stack Overflow == Absturz

C) In den meisten Fällen gibt es an Stelle einer rekursiven Lösung
   auch eine iterative Lösung.

==============================================================
==============================================================

Progammiersprache C:

Vorgänger: B,  PL/1

In C:

Datentyp Adresse:

Wahrheit: Datentyp Adresse, muss einen Bezug zu
          einem Datentyp (int, float) haben.


+		ip	0x000000f85356f5f4 {123}	int *

0x000000f85356f5f4
0x000000f85356f5f5
0x000000f85356f5f6
0x000000f85356f5f7

0x000000f85356f5f8   ..  frei

+		ip	0x00000056713cf854 {123}	int *

0x00000056713cf854
0x00000056713cf855
0x00000056713cf856
0x00000056713cf857

0x00000056713cf858


+		ip	0x005bf80c {123}	int *

0x005bf80c
0x005bf80d
0x005bf80e
0x005bf80f

0x005bf810

ip1 = 0x00cff6cc {1}

0x00cff6cc
0x00cff6cd
0x00cff6ce
0x00cff6cf

0x00cff6d0

=========================================

Adressen in C:

ZWEI OPERATOREN:

"Adresse von":                         & (Variable)

"Wert von" // indirekter Zugriff :     * (Zeiger-Variable)


Bilder:

https://github.com/pelocpp/cpp_introduction/blob/master/Cpp_Introduction/Markdown/ParameterPassingTechniques.md

============================================================

